{"ast":null,"code":"export function renameFile(oldFilename, newPrefix, dateParts) {\n  var splitFilenameByDelimiter = oldFilename.split(\".\");\n  var fileExt = splitFilenameByDelimiter.length === 0 ? \"txt\" : splitFilenameByDelimiter[splitFilenameByDelimiter.length - 1];\n  return \"\".concat(newPrefix, \"_\").concat(dateParts.filenameFormat(), \".\").concat(fileExt);\n}\nexport function formatBytes(bytes) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var k = 1024;\n  var dm = decimals < 0 ? 0 : decimals;\n  var units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  var unitSize = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(k));\n  var formattedNumber = parseFloat((bytes / Math.pow(k, unitSize)).toFixed(dm));\n  return \"\".concat(formattedNumber, \" \").concat(units[unitSize]);\n}\nexport function zeroPadNumber(numberToPad) {\n  var padToLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return \"\".concat(numberToPad).padStart(padToLength, \"0\");\n}","map":{"version":3,"names":["renameFile","oldFilename","newPrefix","dateParts","splitFilenameByDelimiter","split","fileExt","length","concat","filenameFormat","formatBytes","bytes","decimals","arguments","undefined","k","dm","units","unitSize","Math","floor","log","formattedNumber","parseFloat","pow","toFixed","zeroPadNumber","numberToPad","padToLength","padStart"],"sources":["C:/Users/Jun Rong/Documents/GitHub/IMDA-Domain-IP-Enrichment/react-csv-upload/src/helpers/functions.ts"],"sourcesContent":["import { DateParts } from \"./classes\";\r\n\r\nexport function renameFile(\r\n  oldFilename: string,\r\n  newPrefix: string,\r\n  dateParts: DateParts\r\n): string {\r\n  const splitFilenameByDelimiter: string[] = oldFilename.split(\".\");\r\n  const fileExt: string =\r\n    splitFilenameByDelimiter.length === 0\r\n      ? \"txt\"\r\n      : splitFilenameByDelimiter[splitFilenameByDelimiter.length - 1];\r\n  return `${newPrefix}_${dateParts.filenameFormat()}.${fileExt}`;\r\n}\r\n\r\nexport function formatBytes(bytes: number, decimals: number = 2): string {\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n  const unitSize: number =\r\n    bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(k));\r\n  const formattedNumber: number = parseFloat(\r\n    (bytes / Math.pow(k, unitSize)).toFixed(dm)\r\n  );\r\n  return `${formattedNumber} ${units[unitSize]}`;\r\n}\r\n\r\nexport function zeroPadNumber(numberToPad: number, padToLength: number = 2) {\r\n  return `${numberToPad}`.padStart(padToLength, \"0\");\r\n}\r\n"],"mappings":"AAEA,OAAO,SAASA,UAAUA,CACxBC,WAAmB,EACnBC,SAAiB,EACjBC,SAAoB,EACZ;EACR,IAAMC,wBAAkC,GAAGH,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;EACjE,IAAMC,OAAe,GACnBF,wBAAwB,CAACG,MAAM,KAAK,CAAC,GACjC,KAAK,GACLH,wBAAwB,CAACA,wBAAwB,CAACG,MAAM,GAAG,CAAC,CAAC;EACnE,UAAAC,MAAA,CAAUN,SAAS,OAAAM,MAAA,CAAIL,SAAS,CAACM,cAAc,CAAC,CAAC,OAAAD,MAAA,CAAIF,OAAO;AAC9D;AAEA,OAAO,SAASI,WAAWA,CAACC,KAAa,EAAgC;EAAA,IAA9BC,QAAgB,GAAAC,SAAA,CAAAN,MAAA,QAAAM,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAC7D,IAAME,CAAC,GAAG,IAAI;EACd,IAAMC,EAAE,GAAGJ,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAGA,QAAQ;EACtC,IAAMK,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACnE,IAAMC,QAAgB,GACpBP,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACV,KAAK,CAAC,GAAGQ,IAAI,CAACE,GAAG,CAACN,CAAC,CAAC,CAAC;EAC7D,IAAMO,eAAuB,GAAGC,UAAU,CACxC,CAACZ,KAAK,GAAGQ,IAAI,CAACK,GAAG,CAACT,CAAC,EAAEG,QAAQ,CAAC,EAAEO,OAAO,CAACT,EAAE,CAC5C,CAAC;EACD,UAAAR,MAAA,CAAUc,eAAe,OAAAd,MAAA,CAAIS,KAAK,CAACC,QAAQ,CAAC;AAC9C;AAEA,OAAO,SAASQ,aAAaA,CAACC,WAAmB,EAA2B;EAAA,IAAzBC,WAAmB,GAAAf,SAAA,CAAAN,MAAA,QAAAM,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EACxE,OAAO,GAAAL,MAAA,CAAGmB,WAAW,EAAGE,QAAQ,CAACD,WAAW,EAAE,GAAG,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}